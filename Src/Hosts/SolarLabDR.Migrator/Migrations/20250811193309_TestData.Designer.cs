// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SolarLabDR.Migrator;

#nullable disable

namespace SolarLabDR.Migrator.Migrations
{
    [DbContext(typeof(MigrationDbContext))]
    [Migration("20250811193309_TestData")]
    partial class TestData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SolarLabDR.Domain.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid");

                    b.Property<byte[]>("bytes")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("SolarLabDR.Domain.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.HasKey("Id");

                    b.ToTable("Person");

                    b.HasData(
                        new
                        {
                            Id = new Guid("01988eaa-649d-7ee3-b8ce-0291de8587be"),
                            Date = new DateTime(2001, 8, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "slavko@mail.ru",
                            LastName = "Славко",
                            Name = "Валерий"
                        },
                        new
                        {
                            Id = new Guid("019898fb-da44-7018-879c-b0826773613a"),
                            Date = new DateTime(1981, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "testhendler@mail.ru",
                            LastName = "Корочаев",
                            Name = "Петр"
                        },
                        new
                        {
                            Id = new Guid("0198990c-b2ff-711e-b008-135e3cdae65d"),
                            Date = new DateTime(2003, 8, 17, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "asin@mail.ru",
                            LastName = "Бякина",
                            Name = "Ася"
                        },
                        new
                        {
                            Id = new Guid("0198888d-6478-7548-848b-d5726a2dccc4"),
                            Date = new DateTime(2005, 8, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "bukin@mail.ru",
                            LastName = "Букин",
                            Name = "Вася"
                        });
                });

            modelBuilder.Entity("SolarLabDR.Domain.Image", b =>
                {
                    b.HasOne("SolarLabDR.Domain.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });
#pragma warning restore 612, 618
        }
    }
}
